#include <iostream>

#include "chessLib.h"

using namespace std;
/*
void arrayToChess(int i, int j, struct position pos)
{ //satir 8 - i
    i = 8 - pos.yatay;
    j = 'a' + pos.dusey;
    cout << "Giris: " << pos.dusey << pos.yatay << "\tCikis: " << i << "-" << j << endl;
};
*/

Tas **board = (Tas **)malloc(8 * sizeof(Tas *));
    for (i = 0; i < 8; i++) {
        board[i] = (Tas *)malloc(8 * sizeof(Tas));
    }


void Tas::setPos(struct position p1) { this->pos = p1; }
struct position Tas::getPos() { return this->pos; }
void Tas::setMove(struct position *p1) { this->move = p1; }
struct position *Tas::getMove() { return this->move; }
Tas::Tas(struct position p1)
{
    Tas t1;
    t1.setPos(p1);
};

Sah::Sah(struct position p1)
{
    Sah s1;
    s1.setPos(p1);
    
};

Vezir::Vezir(struct position p1)
{
    Vezir v1;
    v1.setPos(p1);
    
};

Fil::Fil(struct position p1)
{
    Fil f1;
    f1.setPos(p1);
   
};

At::At(struct position p1)
{
    At a1;
    a1.setPos(p1);
  
};

Kale::Kale(struct position p1)
{
    Kale k1;
    k1.setPos(p1);
    
};

struct position *hareketKale(struct position p1){
    // this func. return an array of possible positions.
    int i, j, k=0;
    struct position *possiblePositions = (struct position *)calloc(14, sizeof(struct position));
    struct position newPos;
    for (i = 0; i < 8; i++) {
        for (j = 0; j < 8; j++) {
            if (p1.yatay == (j+1) || p1.dusey == (i+'a')) {
                newPos.yatay = (j+1);
                newPos.dusey = i+'a';
                if (!(newPos.dusey == 'e' && newPos.yatay == 4)) {
                    possiblePositions[k++] = newPos;
                }
            }
        }
    }
    return possiblePositions;
}







Piyon::Piyon(struct position p1)
{
    int i;
    Piyon piyon1;
    piyon1.setPos(p1);

    struct position *possiblePositions;
    struct position newPosPos;
    if(p1.yatay == 2){
        struct position *foo = (struct position *)calloc(2, sizeof(struct position));
        for (i = 0; i < 2; i++) {
            newPosPos.yatay = p1.yatay + (i+1);
            newPosPos.dusey = p1.dusey;
            foo[i] = newPosPos;
        }
        possiblePositions = foo;
    }else{
            struct position *foo = (struct position *)calloc(1, sizeof(struct position));
            newPosPos.yatay = p1.yatay + 1;
            newPosPos.dusey = p1.dusey;
            foo[0] = newPosPos;
            possiblePositions = foo;
    }
    piyon1.setMove(possiblePositions);

};


struct position *hareketPiyon(struct position p1){
    int i;
    struct position *possiblePositions;
    struct position newPosPos;
    if(p1.yatay == 2){
        struct position *foo = (struct position *)calloc(2, sizeof(struct position));
        for (i = 0; i < 2; i++) {
            newPosPos.yatay = p1.yatay + (i+1);
            newPosPos.dusey = p1.dusey;
            foo[i] = newPosPos;
        }
        possiblePositions = foo;
    }else{
            struct position *foo = (struct position *)calloc(1, sizeof(struct position));
            newPosPos.yatay = p1.yatay + 1;
            newPosPos.dusey = p1.dusey;
            foo[0] = newPosPos;
            possiblePositions = foo;
    }
    return possiblePositions;
}






















void Sah::printPiece()
{
    struct position *foo = this->getMove();
    int i;
    cout << "Type: Sah\n"
         << "Current Pos: " << this->getPos().dusey << this->getPos().yatay << endl;
    cout << "\n"
         << "Possible Moves: ";
    for (struct position &poses : foo)
        cout << poses.dusey << poses.yatay << " ";
    cout << endl;
}

/*
void movePiece(Sah *s1, struct position newPosP)
{
    s1->setPos(&newPosP);
}
*/
